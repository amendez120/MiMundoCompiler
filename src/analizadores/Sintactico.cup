/* parser_encrypt.cup */
package analizadores;

import java_cup.runtime.Symbol;
import java.util.Map;
import java.util.HashMap;

/*
 * Grammar para encriptar "HTML modificado".
 * Por cada token, llamamos a encrypt(lexico) y acumulamos en StringBuilder.
 */
action code {:
    // Mapa de cifrado: carácter -> secuencia cifrada
    private static final Map<String,String> ENC = new HashMap<>();
    static {
        ENC.put("$", "-");
        ENC.put("#", "+");
        // Agrega aquí más reglas según tu esquema
    }

    // Función de encriptado caracter a caracter
    private static String encrypt(String s) {
        StringBuilder out = new StringBuilder();
        for (char c : s.toCharArray()) {
            String m = ENC.get(String.valueOf(c));
            out.append(m != null ? m : c);
        }
        return out.toString();
    }
:};

parser code {:
    public static void main(String[] args) throws Exception {
        java.io.Reader in = new java.io.FileReader("entrada.txt");
        Lexico lexer = new Lexico(in);
        parser p = new parser(lexer);
        Symbol result = p.parse();
        // El valor de 'start' es un StringBuilder con el texto cifrado
        StringBuilder encrypted = (StringBuilder) result.value;
        System.out.println(encrypted.toString());
    }
:};

scan on;

options {
    parser = parser;
    sym    = sym;
}

/**
 * Terminales definidos en tu JFlex (todos de tipo String en CUP)
 */
terminal String
    DOCTYPE_DECLARATION,
    HTML_OPEN, HTML_CLOSE,
    HEAD_OPEN, HEAD_CLOSE,
    TITLE_OPEN, TITLE_CLOSE,
    BODY_OPEN, BODY_CLOSE,
    DIV_ALIGN_LEFT, DIV_ALIGN_RIGHT, DIV_ALIGN_CENTER, DIV_ALIGN_JUSTIFY, DIV_CLOSE,
    IMG_ALIGN_MIDDLE, IMG_WIDTH_100,
    P_OPEN, P_CLOSE,
    LANG_ATTR,
    TEXT_CONTENT;

// No terminal que acumula el texto cifrado
non terminal StringBuilder S;

// Indicamos que S es el start symbol
start with S;

// Gramática: cada token se encripta y se concatena
S ::= /* empty */                   {: RESULT = new StringBuilder(); :}
    | S DOCTYPE_DECLARATION        {: $1.append(encrypt($2)); RESULT = $1; :}
    | S HTML_OPEN                  {: $1.append(encrypt($2)); RESULT = $1; :}
    | S HTML_CLOSE                 {: $1.append(encrypt($2)); RESULT = $1; :}
    | S HEAD_OPEN                  {: $1.append(encrypt($2)); RESULT = $1; :}
    | S HEAD_CLOSE                 {: $1.append(encrypt($2)); RESULT = $1; :}
    | S TITLE_OPEN                 {: $1.append(encrypt($2)); RESULT = $1; :}
    | S TITLE_CLOSE                {: $1.append(encrypt($2)); RESULT = $1; :}
    | S BODY_OPEN                  {: $1.append(encrypt($2)); RESULT = $1; :}
    | S BODY_CLOSE                 {: $1.append(encrypt($2)); RESULT = $1; :}
    | S DIV_ALIGN_LEFT             {: $1.append(encrypt($2)); RESULT = $1; :}
    | S DIV_ALIGN_RIGHT            {: $1.append(encrypt($2)); RESULT = $1; :}
    | S DIV_ALIGN_CENTER           {: $1.append(encrypt($2)); RESULT = $1; :}
    | S DIV_ALIGN_JUSTIFY          {: $1.append(encrypt($2)); RESULT = $1; :}
    | S DIV_CLOSE                  {: $1.append(encrypt($2)); RESULT = $1; :}
    | S IMG_ALIGN_MIDDLE           {: $1.append(encrypt($2)); RESULT = $1; :}
    | S IMG_WIDTH_100              {: $1.append(encrypt($2)); RESULT = $1; :}
    | S P_OPEN                     {: $1.append(encrypt($2)); RESULT = $1; :}
    | S P_CLOSE                    {: $1.append(encrypt($2)); RESULT = $1; :}
    | S LANG_ATTR                  {: $1.append(encrypt($2)); RESULT = $1; :}
    | S TEXT_CONTENT               {: $1.append(encrypt($2)); RESULT = $1; :}
    ;
